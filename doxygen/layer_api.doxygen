// Copyright Steinwurf ApS 2011.
// Distributed under the "STEINWURF RESEARCH LICENSE 1.0".
// See accompanying file LICENSE.rst or
// http://www.steinwurf.com/licensing

/// @brief Doxygen dummy class specifying the API available at different
///        layers
class layer
{
public:

    /// @typedef field_type
    ///
    /// The finite field type used e.g. fifi::binary8 for the Finite
    /// Field 2^8
    typedef fifi_finite_field field_type;

    /// @typedef value_type
    ///
    /// The value type storing the field elements used for the
    /// specified field. E.g. the binary extension field 2^8 uses
    /// uint8_t as the value_type.
    typedef field::value_type value_type;

    /// @typedef seed_type
    ///
    /// The data type used for seeding the generators in the Generator API.
    /// Generators implementing the layer::seed(seed_type) function should
    /// also provide this typedef.
    typedef seed_type seed_type;

    /// @typedef rank_type
    ///
    /// Specifies the data type used to store the rank
    typedef rank_type rank_type;

    /// @brief Doxygen dummy class specifying the API available at different
    ///        layers.
    class config
    {
    public:

        //------------------------------------------------------------------
        // CONFIG API
        //------------------------------------------------------------------

        /// @ingroup config_api
        ///
        /// @brief Factory base constructor
        ///
        /// @param max_symbols the maximum symbols coders can expect
        ///
        /// @param max_symbol_size the maximum size of a symbol in bytes
        factory(uint32_t max_symbols, uint32_t max_symbol_size);

        //------------------------------------------------------------------
        // Functions belonging to other APIs but placed required in the
        // factory base in order to correctly build the different layers.
        //------------------------------------------------------------------

        /// @ingroup config_api
        ///
        /// @return the maximum number of symbols in a block
        uint32_t max_symbols() const;

        /// @ingroup config_api
        ///
        /// @return the maximum symbol size in bytes
        uint32_t max_symbol_size() const;

        /// @ingroup config_api
        ///
        /// @return the maximum symbol length in value type elements
        ///         defined by the finite field
        uint32_t max_symbol_length() const;

        /// @ingroup storage_api
        ///
        /// @return The maximum amount of data encoded / decoded in bytes.
        ///         This is calculated by multiplying the maximum number
        ///         of symbols encoded / decoded by the maximum size of
        ///         a symbol.
        uint32_t max_block_size() const;

        /// @ingroup storage_api
        ///
        /// @return The maximum amount of data encoded / decoded in
        ///         value_type elements, defined by the finite field used.
        uint32_t max_block_length() const;

        /// @ingroup codec_header_api
        ///
        /// @brief Can be reimplemented by a symbol header API layer to
        ///        ensure that enough space is available in the header for
        ///        some layer specific data.
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::header_size() function.
        ///
        /// @return The size in bytes required for the symbol header buffer.
        uint32_t max_header_size() const;

        /// @ingroup symbol_id_api
        ///
        /// @brief Can be reimplemented by a Factory Symbol ID layer
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::header_size() function.
        ///
        /// @return The maximum size in bytes required for a symbol id.
        /// @see factory_layer_api
        uint32_t max_id_size() const;

        /// @ingroup payload_codec_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::payload_size() function.
        ///
        /// @return the maximum required payload buffer size in bytes
        uint32_t max_payload_size() const;

        /// @ingroup coefficient_storage_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::coefficients_size() function.
        ///
        /// @return The maximum required coefficients buffer size in bytes
        uint32_t max_coefficients_size() const;

        /// @ingroup coefficient_storage_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::coefficient_vectors() function.
        ///
        /// @return The maximum required coefficient vectors
        uint32_t max_coefficient_vectors() const;

        /// @ingroup feedback_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::feedback_size() function.
        ///
        /// @return the maximum required feedback buffer size in bytes
        uint32_t max_feedback_size() const;

        /// @ingroup config_api
        ///
        /// Sets the number of symbols
        ///
        /// @param symbols the number of symbols
        void set_symbols(uint32_t symbols);

        /// @ingroup config_api
        ///
        /// Sets the symbol size
        ///
        /// @param symbol_size the symbol size
        void set_symbol_size(uint32_t symbol_size);
    };

    //------------------------------------------------------------------
    // CONSTRUCTION API
    //------------------------------------------------------------------

    /// @ingroup construction_api
    ///
    /// @brief Constructs the coder with the maximum parameters it will ever
    ///        see. A coder may only be constructed ONCE, but initialized
    ///        many times.
    ///
    /// @param the_factory The factory used to build the codec layer. Provides
    ///        access to cached data and factory functions.
    template<class Factory>
    void construct(Factory& the_factory);

    /// @ingroup construction_api
    ///
    /// @brief Initializes the coder
    ///
    /// @param the_factory The factory used to build the codec layer. Provides
    ///        access to cached data and factory functions.
    template<class Factory>
    void initialize(Factory& the_factory);

    /// @ingroup construction_api
    ///
    /// @brief De-initializes the coder. This function is called to
    ///        allow stacks to release temporary handles they may have
    ///        opened during initialize. This is important when using
    ///        resource pools to recycle stacks. When the stack gets
    ///        "recycled" in the pool deinitialize should be called.
    ///
    /// @param the_factory The factory used to build the codec layer. Provides
    ///        access to cached data and factory functions.
    template<class Factory>
    void deinitialize(Factory& the_factory);

    //------------------------------------------------------------------
    // CODEC HEADER API
    //------------------------------------------------------------------

    /// @ingroup codec_header_api
    ///
    /// @brief Reads the symbol header.
    ///
    /// @param symbol_data The destination buffer for the encoded symbol.
    ///
    /// @param symbol_header At this point the symbol header should be
    ///        initialized.
    void decode(uint8_t* symbol_data, uint8_t* symbol_header);

    /// @ingroup codec_header_api
    ///
    /// @brief Can be reimplemented by a symbol header API layer to
    ///        ensure that enough space is available in the header for
    ///        some layer specific data.
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::config::max_header_size() function.
    ///
    /// @return The size in bytes required for the symbol header buffer.
    uint32_t header_size() const;

    //------------------------------------------------------------------
    // SYMBOL ID API
    //------------------------------------------------------------------

    /// @ingroup symbol_id_api
    ///
    /// @brief Can be reimplemented by a Symbol ID layer
    ///
    /// @param symbol_id The buffer where the symbol id is written. This id
    ///        should uniquely describe the coding coefficients
    ///        used to generate an encoded symbol. It is therefore
    ///        sufficient to transmit only the symbol id and not
    ///        necessarily all coding coefficients to decoders.
    ///
    /// @param coefficients Pointer to a pointer of coefficients.
    ///        After the call to write_id the coefficients pointer
    ///        will point to memory storing all coding coefficients
    ///        corresponding to the symbol id written to the symbol_id
    ///        buffer.
    ///        Note, the buffer returned may be change by the calling
    ///        code. The implementation should therefore ensure that this
    ///        will not cause problems e.g. by returning a pointer to a
    ///        internal buffered copy of the coefficients.
    ///
    /// @return The number of bytes used from the symbol_id buffer.
    uint32_t write_id(uint8_t* symbol_id, uint8_t** coefficients);

    /// @ingroup symbol_id_api
    ///
    /// @brief Can be reimplemented by a Symbol ID layer
    ///
    /// @param symbol_id Contains the symbol id for an encoded symbol.
    ///
    /// @param coefficients Pointer to pointer of the symbol
    ///        coefficients. After the call to read_id the
    ///        coefficients pointer will point to memory storing
    ///        all coding coefficients corresponding to the symbol id
    ///        read from the symbol_id buffer.
    ///        Note, the buffer returned may be change by the calling
    ///        code. The implementation should therefore ensure that this
    ///        will not cause problems e.g. by returning a pointer to a
    ///        internal buffered copy of the coefficients.
    void read_id(uint8_t* symbol_id, uint8_t** coefficients);

    /// @ingroup symbol_id_api
    ///
    /// @brief Can be reimplemented by a Symbol ID layer
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::config::max_id_size() function.
    ///
    /// @return the size in bytes required for the symbol id buffer.
    uint32_t id_size();

    //------------------------------------------------------------------
    // COEFFICIENT GENERATOR API
    //------------------------------------------------------------------

    /// @ingroup coefficient_generator_api
    ///
    /// Fills the input buffer with symbol coefficients used for either
    /// encoding or decoding a symbol.
    ///
    /// @param coefficients Pointer to the memory where the coefficients should
    ///        be stored. The coefficient buffer should have at least
    ///        layer::coefficients_size() capacity.
    void generate(uint8_t* coefficients);

    /// @ingroup coefficient_generator_api
    ///
    /// The generate partial function must only generate non-zero symbol
    /// coefficients for symbols which have been set in the Symbol Storage
    /// Layer. The primary use-case for generate_partial(uint8_t*) is to
    /// allow encoding to start prior to having all original source symbols
    /// available.
    ///
    /// @copydoc generate(uint8_t*)
    void generate_partial(uint8_t* coefficients);

    /// @ingroup coefficient_generator_api
    ///
    /// Set the seed of the coefficient generator used. Note that not all
    /// generators provide the set_seed() function. E.g. a layer using a
    /// Vandermonde matrix as source for the symbol coefficients will not
    /// implement the set_seed() function.
    ///
    /// @note If you implement this function you most likely also have
    ///       to provide the layer::seed_type typedef.
    ///
    /// @param seed_value The seed value for the generator.
    void set_seed(seed_type seed_value);

    /// @ingroup coefficient_generator_api
    ///
    /// @return True if coefficients can be generated for all symbols
    bool can_generate() const;

    /// @ingroup coefficient_generator_api
    ///
    /// @param index The symbol index we want to generate a coefficient for
    ///
    /// @return True if a coefficient can be generated for a specific symbol
    ///         index
    bool can_generate(uint32_t index) const;

    //------------------------------------------------------------------
    // COEFFICIENT STORAGE API
    //------------------------------------------------------------------

    /// @ingroup coefficient_storage_api
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::config::max_coefficient_vectors()
    ///       function.
    ///
    /// @return The number of coefficient vectors stored. When accessing the
    ///         coefficients data the index used should be between 0 and the
    ///         number returned by this function.
    uint32_t coefficient_vectors() const;

    /// @ingroup coefficient_storage_api
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the
    ///       layer::config::max_coefficient_vector_size()
    ///       function.
    ///
    /// @return The number of bytes needed to store the symbol
    /// coefficients.
    uint32_t coefficient_vector_size() const;

    /// @ingroup coefficient_storage_api
    ///
    /// @return The number of layer::value_type elements needed to
    ///         store the symbol coefficients.
    uint32_t coefficient_vector_length() const;

    /// @ingroup coefficient_storage_api
    ///
    /// @return The number of coefficients stored in a coefficient
    ///         vector. The count will say how many finite field
    ///         elements will be stored within a coefficient vector,
    ///         whereas the size and length refers to the space (in
    ///         terms of memory) occupied by those coefficients.
    uint32_t coefficient_vector_elements() const;

    /// @ingroup coefficient_storage_api
    ///
    /// @param index the index in the vector
    ///
    /// @return the specified vector
    uint8_t* coefficient_vector_data(uint32_t index);

    /// @ingroup coefficient_storage_api
    ///
    /// @param index the index in the vector
    ///
    /// @return the specified vector
    const uint8_t* coefficient_vector_data(uint32_t index) const;

    /// @ingroup coefficient_storage_api
    ///
    /// Sets a coefficient buffer - by copying it into the right location in
    /// the buffer.
    ///
    /// @param index the index of the coefficients into the coding block
    ///
    /// @param storage The actual data of the coefficients
    void set_coefficient_vector_data(uint32_t index,
                                     const sak::const_storage& storage);

    /// Access the value of in an array of coefficients
    ///
    /// @param coefficients The coefficients array
    ///
    /// @param index The index of the value we are interested in
    ///
    /// @return The value at the specified index
    value_type coefficient_value(const uint8_t* coefficients,
                                 uint32_t index) const;

    /// Set a value in an array of coefficients
    ///
    /// @param coefficients The coefficients array
    ///
    /// @param index The index in the array where the value should be set
    ///
    /// @param value The value to set in the array
    void set_coefficient_value(uint8_t* coefficients, uint32_t index,
                               value_type value) const;

    //------------------------------------------------------------------
    // FINITE FIELD API
    //------------------------------------------------------------------

    /// @ingroup finite_field_api
    ///
    /// Multiplies the symbol with the coefficient
    ///     symbol_dest = symbol_dest * coefficient
    ///
    /// @param symbol_dest the destination buffer for the source symbol
    ///
    /// @param coefficient the multiplicative constant
    ///
    /// @param symbol_size the size of the symbol in bytes
    void multiply(uint8_t* symbol_dest,
                  value_type coefficient,
                  uint32_t symbol_size);

    /// @ingroup finite_field_api
    ///
    /// Multiplies the source symbol with the coefficient and adds it to the
    /// destination symbol i.e.:
    ///     symbol_dest = symbol_dest + symbol_src * coefficient
    ///
    /// @param symbol_dest the buffer for the destination symbol
    ///
    /// @param symbol_src the buffer for the source symbol
    ///
    /// @param coefficient the multiplicative constant
    ///
    /// @param symbol_size the size of the symbol in bytes
    void multiply_add(uint8_t* symbol_dest,
                      const uint8_t* symbol_src,
                      value_type coefficient,
                      uint32_t symbol_size);

    /// @ingroup finite_field_api
    ///
    /// Adds the source symbol adds to the destination symbol i.e.:
    ///     symbol_dest = symbol_dest + symbol_src
    ///
    /// @param symbol_dest the destination buffer holding the resulting
    ///        symbol
    ///
    /// @param symbol_src the source symbol
    ///
    /// @param symbol_size the size of the symbol in bytes
    void add(uint8_t* symbol_dest,
             const uint8_t* symbol_src,
             uint32_t symbol_size);

    /// @ingroup finite_field_api
    ///
    /// Multiplies the source symbol with the coefficient and subtracts
    /// it from the destination symbol i.e.:
    ///     symbol_dest = symbol_dest - (symbol_src * coefficient)
    ///
    /// @param symbol_dest the buffer for the destination symbol
    ///
    /// @param symbol_src the buffer for the source symbol
    ///
    /// @param coefficient the multiplicative constant
    ///
    /// @param symbol_size the size of the symbol in bytes
    void multiply_subtract(uint8_t* symbol_dest,
                           const uint8_t* symbol_src,
                           value_type coefficient,
                           uint32_t symbol_size);

    /// @ingroup finite_field_api
    ///
    /// Subtracts the source symbol from the destination symbol i.e.:
    ///     symbol_dest = symbol_dest - symbol_src
    ///
    /// @param symbol_dest the destination buffer holding the resulting
    ///        symbol
    ///
    /// @param symbol_src the source symbol
    ///
    /// @param symbol_size the size of the symbol in bytes
    void subtract(uint8_t* symbol_dest,
                  const uint8_t* symbol_src,
                  uint32_t symbol_size);

    /// @ingroup finite_field_api
    ///
    /// Inverts the field element
    ///
    /// @param value the finite field value to be inverted.
    ///
    /// @return the inverse
    value_type invert(value_type value);

    /// @ingroup finite_field_api
    ///
    /// Calculates the dot product of the constants and the source
    /// symbols. The result is stored in symbol_dest.
    ///
    /// @param symbol_dest Array of pointers to destination symbol buffers
    /// @param symbol_src Array of pointers to source symbol buffers
    /// @param constants Array of pointers to constant buffers
    /// @param symbol_size The size of the symbols in bytes
    /// @param dest_vectors The number of destination symbols
    /// @param src_vectors The number of source symbols
    void vector_dot_product(uint8_t** symbol_dest,
                            const uint8_t** symbol_src,
                            uint8_t** constants, uint32_t symbol_size,
                            uint32_t dest_vectors, uint32_t src_vectors);

    //------------------------------------------------------------------
    // SYMBOL STORAGE API
    //------------------------------------------------------------------

    /// @ingroup storage_api
    ///
    /// Copies the encoded / decoded symbols to the dest buffer.
    ///
    /// @param dest The destination buffer where the symbols should be
    ///        copied. The function will copy block_size() bytes or until
    ///        the dest buffer is full.
    void copy_from_symbols(const sak::mutable_storage& dest) const;

    /// @ingroup storage_api
    ///
    /// Copies an encoded / decoded symbols to the dest buffer.
    ///
    /// @param index The index of the symbol to be copied
    ///
    /// @param dest The destination buffer where the symbols should be
    ///        copied. The function will copy symbol_size() bytes or until
    ///        the dest buffer is full.
    void copy_from_symbol(uint32_t index, const sak::mutable_storage& dest) const;

    /// @ingroup storage_api
    ///
    /// Copies the storage data provided into the internal storage. This
    /// function will assume that the data storage is available
    ///
    /// @param src The buffer where the symbols should be copied. The function
    ///        will copy block_size() bytes or until the buffer is full.
    void copy_into_symbols(const sak::const_storage& src) const;

    /// @ingroup storage_api
    ///
    /// Copies an encoded / decoded symbols to the dest buffer.
    ///
    /// @param index The index of the symbol to be copied
    ///
    /// @param src The buffer where the symbols should be copied. The function
    ///        will copy symbol_size() bytes or until the buffer is full.
    void copy_into_symbol(uint32_t index, const sak::const_storage& src) const;

    /// @ingroup storage_api
    ///
    /// @param index the index number of the symbol
    ///
    /// @return Returns a pointer to the symbol data. The size of
    ///         the symbol data is provided by the symbol_size() function.
    uint8_t* mutable_symbol(uint32_t index);

    /// @ingroup storage_api
    ///
    /// @param index the index number of the symbol
    ///
    /// @return Returns a const pointer to the symbol data. The size of
    ///         the symbol data is provided by the symbol_size() function.
    const uint8_t* const_symbol(uint32_t index) const;

    /// @ingroup storage_api
    ///
    /// Sets the storage for the source symbols. This will specify all
    /// symbols also in the case of partial data. If this is not desired
    /// then the symbols should be specified individually. This also
    /// means that it is the responsibility of the user to communicate
    /// how many of the bytes transmitted are application data.
    ///
    /// @param symbol_storage A sak::const_storage container initialized
    ///        with the buffer to be use as encoding buffer.
    void set_const_symbols(const sak::const_storage& symbol_storage);

    /// @ingroup storage_api
    ///
    /// Sets the storage for the source symbols. This will specify all
    /// symbols also in the case of partial data. If this is not desired
    /// then the symbols should be specified individually. This also
    /// means that it is the responsibility of the user to communicate
    /// how many of the bytes transmitted are application data.
    ///
    /// @param symbol_storage A sak::mutable_storage container initialized
    ///        with the buffer to be use as encoding / decoding buffer.
    void set_mutable_symbols(const sak::mutable_storage& symbol_storage);

    /// @ingroup storage_api
    ///
    /// Sets a data of a symbol.
    ///
    /// @param index the index of the symbol into the coding block
    ///
    /// @param symbol the actual data of that symbol
    void set_mutable_symbol(uint32_t index, const sak::mutable_storage& symbol);

    /// @ingroup storage_api
    ///
    /// Sets a symbol.
    ///
    /// @param index the index of the symbol into the coding block
    ///
    /// @param symbol the actual data of that symbol
    void set_const_symbol(uint32_t index, const sak::const_storage& symbol);

    /// @ingroup storage_api
    ///
    /// @return the number of symbols in this block coder
    uint32_t symbols() const;

    /// @ingroup storage_api
    ///
    /// @return the symbol size of a symbol in bytes
    uint32_t symbol_size() const;

    /// @ingroup storage_api
    ///
    /// @return the length of the symbol in layer::value_type elements
    uint32_t symbol_length() const;

    /// @ingroup storage_api
    ///
    /// @return the block size i.e. the total size in bytes that this
    ///         coder operates on. Users may use the bytes_used()
    ///         function provided in the symbol storage layers to see
    ///         how many of those bytes are then used.
    uint32_t block_size() const;

    /// @ingroup storage_api
    ///
    /// @return the block length is the number of value_type elements
    ///         needed for a block where value_type is the underlying
    ///         data type used by the finite field
    uint32_t block_length() const;

    /// @ingroup storage_api
    ///
    /// Sets the number of bytes used
    ///
    /// @param bytes_used number of bytes used of the total coders
    ///        block size
    void set_bytes_used(uint32_t bytes_used);

    /// @ingroup storage_api
    ///
    /// @return the number of bytes used
    uint32_t bytes_used() const;

    /// @ingroup storage_api
    ///
    /// @return The number of symbols that are available. Available
    ///         means where the memory is available, but which may not
    ///         have been initialized through a layer::set_const_symbol(),
    ///         layer::set_const_symbols(), layer::set_mutable_symbol() or
    ///         layer::set_mutable_symbols() call by the user.
    uint32_t symbols_available() const;

    /// @ingroup storage_api
    ///
    /// @return The number of symbols that are initialized.
    ///         Initialized means that a symbols memory is available and
    ///         has been explicitly set by the user through a
    ///         layer::set_const_symbol(), layer::set_const_symbols(),
    ///         layer::set_mutable_symbol() or layer::set_mutable_symbols()
    ///         call.
    ///         Any symbol which is initialized is also available.
    uint32_t symbols_initialized() const;

    /// @ingroup storage_api
    ///
    /// @return True if all symbols in the storage layer are available.
    ///         Available means where the memory is available, but which
    ///         may not have been initialized through a
    ///         layer::set_const_symbol(), layer::set_const_symbols(),
    ///         layer::set_mutable_symbol() or layer::set_mutable_symbols()
    ///         call by the user.
    ///         Available means where the memory is available, but not
    ///         by the user.
    bool is_symbols_available() const;

    /// @ingroup storage_api
    ///
    /// @return True if all symbols in the storage layer is initialized.
    ///         Initialized means that a symbols memory is available and
    ///         has been explicitly set by the user through a
    ///         layer::set_const_symbol(), layer::set_const_symbols(),
    ///         layer::set_mutable_symbol() or layer::set_mutable_symbols()
    ///         call.
    ///         Any symbol which is initialized is also available.
    bool is_symbols_initialized() const;

    /// @ingroup storage_api
    ///
    /// @param index The index of the symbol to check
    ///
    /// @return True if the specific symbol is available.
    ///         Available means where the memory is available, but which
    ///         may not have been initialized through a
    ///         layer::set_const_symbol(), layer::set_const_symbols(),
    ///         layer::set_mutable_symbol() or layer::set_mutable_symbols()
    ///         call.
    ///         Available means where the memory is available, but not
    ///         by the user.
    bool is_symbol_available(uint32_t index) const;

    /// @ingroup storage_api
    ///
    /// @param index The index of the symbol to check
    ///
    /// @return True if the specific symbol is initialized. Initialized means
    ///         that a symbol's memory is available and it has been explicitly
    ///         set by layer::set_const_symbol(), layer::set_const_symbols(),
    ///         layer::set_mutable_symbol() or layer::set_mutable_symbols().
    ///         Any symbol which is initialized is also available.
    bool is_symbol_initialized(uint32_t index) const;

    //------------------------------------------------------------------
    // PAYLOAD API
    //------------------------------------------------------------------

    /// @ingroup payload_codec_api
    ///
    /// Writes the payload representing a single encoded symbol into the
    /// provided buffer. The exact content and structure of the payload
    /// depends on the codec used.
    ///
    /// The provided buffer should have a size of at least
    /// layer::payload_size() bytes. This is guaranteed to be enough for
    /// the specific configuration used for the codec, e.g. the number of
    /// symbols and the size of a symbol. However, since many codecs use
    /// variable-size encoding, i.e. using less bytes to represent the
    /// headers of a systematic symbol, we will return the actual number of
    /// bytes used. So that the application can avoid transmitting/storing
    /// more data than actually needed.
    ///
    /// @param payload The buffer where the payload should be written.
    ///
    /// @return the total bytes used from the payload
    /// buffer
    uint32_t write_payload(uint8_t* payload);

    /// @ingroup payload_codec_api
    ///
    /// Writes multiple payloads representing multiple encoded symbols into
    /// the provided buffers. The exact content and structure of the payloads
    /// depends on the codec used.
    ///
    /// The provided buffers should have a size of at least
    /// layer::payload_size() bytes.
    ///
    /// The underlying implementation is optimized for processing a small
    /// number of larger symbols, which is typical in a storage scenario.
    /// Consequently, this function should not be used in network scenarios
    /// where the symbol size is only a few kilobytes.
    ///
    /// @param payloads Array of pointers to the payload buffers
    ///
    /// @param payload_count The number of payloads that should be written.
    ///
    /// @return the total number of payloads written
    uint32_t write_payloads(uint8_t** payloads, uint32_t payload_count);

    /// @ingroup payload_codec_api
    ///
    /// Reads an encoded symbol stored in the payload buffer.
    ///
    /// @param payload The buffer storing the payload of an encoded symbol.
    ///        The payload buffer may be changed by this function, so
    ///        it cannot be reused. If the payload is needed multiple times,
    ///        then make sure to keep a copy of the original payload.
    void read_payload(uint8_t* payload);

    /// @ingroup payload_codec_api
    ///
    /// Reads multiple payloads that are stored in the provided buffers.
    /// These buffers should have a size of layer::payload_size() bytes.
    /// The decoder state is only modified if full decoding is possible with
    /// the provided payloads.
    ///
    /// This function cannot be called if the decoder has any partially decoded
    /// symbols in the decoding matrix. But the decoder may have previously
    /// defined uncoded symbols that will be used by read_payloads during the
    /// decoding process.
    ///
    /// The underlying implementation is optimized for processing a small
    /// number of larger symbols, which is typical in a storage scenario.
    /// Consequently, this function should not be used in network scenarios
    /// where the symbol size is only a few kilobytes.
    ///
    /// @param payloads Array of pointers to the payload buffers.
    ///        These buffers will not be changed during decoding, so it is
    ///        safe to use them multiple times.
    ///
    /// @param payload_count The number of payloads that should be processed.
    ///
    /// @return true if full decoding was possible with the provided payloads
    bool read_payloads(uint8_t** payloads, uint32_t payload_count);

    /// @ingroup payload_codec_api
    ///
    /// @note If you implement this function you most likely also have to
    ///       implement the layer::config::max_payload_size()
    ///       function.
    ///
    /// @return the required payload buffer size in bytes
    uint32_t payload_size() const;

    //------------------------------------------------------------------
    // FEEDBACK API
    //------------------------------------------------------------------

    /// @ingroup feedback_api
    ///
    /// Writes feedback into the provided buffer.
    ///
    /// @param buffer The buffer which should contain the feedback data
    ///
    /// @return the total bytes used from the buffer
    uint32_t write_feedback(uint8_t* buffer) const;

    /// @ingroup feedback_api
    ///
    /// Reads feedback stored buffer.
    ///
    /// @param buffer The buffer storing the feedback information.
    void read_feedback(const uint8_t* buffer);

    /// @ingroup feedback_api
    ///
    /// @note If you implement this function you most likely also have to
    ///       implement the layer::config::max_feedback_size()
    ///       function.
    ///
    /// @return the required feedback buffer size in bytes
    uint32_t feedback_size() const;

    //------------------------------------------------------------------
    // STATE API
    //------------------------------------------------------------------

    /// @ingroup state_api
    ///
    /// @return The rank of the "remote" entity e.g. a decoder
    rank_type remote_rank() const;

    /// @ingroup state_api
    ///
    /// Queries the decoding status vector to check whether a specific
    /// symbols has been partially or fully decoded by the decoder
    ///
    /// @param index The index of the symbol whos state which should be
    ///        checked
    ///
    /// @return True if the symbol has been partially or fully decoded and
    ///         False if the symbol is missing at the decoder.
    bool remote_is_symbol_pivot(uint32_t index) const;

    //------------------------------------------------------------------
    // TRACE API
    //------------------------------------------------------------------

    /// @ingroup trace_api
    ///
    /// Enables tracing in a stack.
    ///
    /// @param callback The function callback where the tracing information
    ///        will be delivered. As a user you specify the callback if you
    ///        want to have control over the tracing output. @see
    ///        trace_callback for more information about the callback
    ///        signature.
    void trace(const trace_callback_function& callback);

    /// @ingroup trace_api
    ///
    /// Enables tracing in a stack. The output will be written to standard
    /// out.
    void trace();

    /// @ingroup trace_api
    ///
    /// @return The callback used to output the trace information
    const trace_callback_function& trace_callback() const

    /// @ingroup trace_api
    ///
    /// Sets a zone prefix for the tracing output. The zone prefix will be
    /// appended to all the output. This makes it possible to have two
    /// stacks that both trace to standard out, but still differentiate the
    /// output.
    ///
    /// @param zone_prefix The zone prefix to append to all tracing zones
    void set_zone_prefix(const std::string& zone_prefix);

    /// @ingroup trace_api
    ///
    /// @returns the current zone prefix.
    const std::string& zone_prefix() const;

    /// @ingroup trace_api
    ///
    /// The function that layers should use to write out trace
    /// information. It simply forwards to the trace callback if
    /// specified.
    ///
    /// @param zone The zone should be a short string that
    ///        describes what and from where the trace data
    ///        originates
    ///
    /// @param data The trace data is a human readable string
    ///        containing the trace information.
    void write_trace(const std::string& zone,
                     const std::string& data) const;

    /// @ingroup trace_api
    ///
    /// Returns whether a trace function is specified. If not then
    /// the tracing layers should not write trace information.
    ///
    /// @return True if tracing is enabled otherwise false
    bool is_trace_enabled() const;

};
